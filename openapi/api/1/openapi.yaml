openapi: 3.0.0

info:
  version: 0.0.1
  title: Home Project Blog Service
  description: |
    Blog for the OnHomeProject project by SoftServe


tags:
  - name: "users"
  - name: "posts"
  - name: "comments"
  - name: "tags"

paths:

  /users:
    post:
      summary: Sign up a new user
      tags:
        - "users"
      operationId: signUp
      requestBody:
        description: object User
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: BAD REQUEST
        '401':
          $ref: '#/components/responses/UnauthorizedError'


    get:
      summary: This gets all users
      description:  Return all users with paggination, could be sorted
      tags:
        - "users"
      operationId: getAllUsers
      parameters:
        - in: query
          name: id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: name
          description: Find by name
          schema: 
            type: string
        - in: query
          name: sort
          description: In order to execute *asc*, you need to specify in the search *id* or *name* parameter. In order to complete the *desk* sorting must be specified in the query parameter *-id*
          schema:
            type: string
            enum: [ "id", "-id", "name", "-name" ]
            default: "-id"
        - in: query
          name: page_num
          description: PagEnum indicates the page you expect to receive.
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          description:  PageSize indicates the number of users on the page
          schema:
            type: integer
            default: 50
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: number
                format: int64
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: NOT FOUND

  /users/{user_id}:
    get:
      tags:
        - "users"
      summary: Find user by ID
      description: Returns a user
      operationId: getUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND

    put:
      tags:
        - "users"
      summary: Update user by ID
      description: Updates a user
      operationId: updateUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
            format: int64
          required: true
      requestBody:
        description: object User
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND

    delete:
      tags:
        - "users"
      summary: Delete user by ID
      description: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          name: user_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND



  /posts:
    post:
      summary: Create a Post
      tags:
        - "posts"
      operationId: create
      requestBody:
        description: object Post
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: BAD REQUEST


    get:
      summary: This gets all posts
      tags:
        - "posts"
      operationId: getAllPosts
      parameters:
        - in: query
          name: id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: tag_id
          description: This gets all posts with the given tag
          schema:
            type: number
            format: int64
        - in: query
          name: tag_name
          description: This gets all posts with the given tag
          schema:
            type: string
        - in: query
          name: user_id
          description: This gets all user posts
          schema:
            type: number
            format: int64
        - in: query
          name: sort
          description: In order to execute *asc*, you need to specify in the search *id* or *title* parameter. In order to complete the *desk* sorting must be specified in the query parameter *-id*
          schema:
            type: string
            enum: [ "id", "-id", "title", "-title" ]
            default: "-id"
        - in: query
          name: page_num
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: number
                format: int64
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: NOT FOUND
  
  
  /posts/{post_id}:
    get:
      tags:
        - "posts"
      summary: Find post by ID
      description: Returns a post
      operationId: getPost
      parameters:
        - in: path
          name: post_id
          schema:
            type: number
            format: int64
          required: true
        - in: query
          name: id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: name
          description: Find by name
          schema: 
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND

    put:
      tags:
        - "posts"
      summary: Update post by ID
      description: Updates a post
      operationId: updatePost
      parameters:
        - in: path
          name: post_id
          schema:
            type: number
            format: int64
          required: true
      requestBody:
        description: some parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND

    delete:
      tags:
        - "posts"
      summary: Delete post by ID
      description: Delete a post
      operationId: deletePost
      parameters:
        - in: path
          name: post_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND


  /comments/{post_id}:
    get:
      summary: This gets all comments to post
      description: In order to execute *asc*, you need to specify in the search *id* parameter. In order to complete the *desk* sorting must be specified in the query parameter *-id*
      tags:
        - "comments"
      operationId: getAllComments
      parameters:
        - in: query
          name: user_id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: user_name
          description: Find by name
          schema: 
            type: string
        - in: path
          name: post_id
          schema:
            type: number
            format: int64
          required: true
        - in: query
          name: sort
          schema:
            type: string
            enum: [ "id", "-id"]
            default: "-id"
        - in: query
          name: page_num
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            default: 20    
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: NOT FOUND
          
          
    post:
      summary: Leave a Comment
      tags:
        - "comments"
      operationId: leaveAComment
      parameters:
        - in: path
          name: post_id
          schema:
            type: number
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: BAD REQUEST


  /comments/{comment_id}:
    get:
      tags:
        - "comments"
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
        - in: path
          name: comment_id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND
    put:
      tags:
        - "comments"
      summary: Update commet by ID
      description: Updates a comment
      operationId: updateComment
      parameters:
        - in: path
          name: comment_id
          schema:
            type: number
            format: int64
          required: true
      requestBody:
        description: some parameters
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"  
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND


    delete:
      tags:
        - "comments"
      summary: Delete post by ID
      description: Delete a post
      operationId: deleteComment
      parameters:
        - in: path
          name: comment_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND


  /tags:
    get:
      description: In order to execute *asc*, you need to specify in the search *id* or *tagname* parameter. In order to complete the *desk* sorting must be specified in the query parameter *-id*
      tags:
        - "tags"
      operationId: getAllTags
      parameters:
        - in: query
          name: id
          description: Find by id
          schema: 
            type: number
            format: int64
        - in: query
          name: name
          description: Find by name
          schema: 
            type: string
        - in: query
          name: sort
          schema:
            type: string
            enum: [ "id", "-id", "tagname", "-tagname" ]
            default: "tagname"
        - in: query
          name: page_num
          schema:
            type: integer
        - in: query
          name: page_size
          schema:
            type: integer
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: number
                format: int64
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "404":
          description: NOT FOUND


  /tags/{tag_id}:
    get:
      summary: Find tag by ID
      description: Returns a tag
      tags:
        - "tags"
      operationId: getTag
      parameters:
        - in: path
          name: tag_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND


    put:
      tags:
        - "tags"
      summary: Update tag by ID
      operationId: updateTag
      parameters:
        - in: path
          name: tag_id
          schema:
            type: number
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND

    delete:
      tags:
        - "tags"
      summary: Delete a tag by ID
      operationId: deleteTag
      parameters:
        - in: path
          name: tag_id
          schema:
            type: number
            format: int64
          required: true
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND


components:
  schemas:

    User: #???GitAuthorize
      description: This is a user object
      type: object
      required:
        - name
      properties:
        id:
          type: number
          format: int64
          readOnly: true
        name:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
          example: passworD321
        role:
          description: This is the level of user access to various functions
          type: string
          enum:
            - guest
            - user
            - moderator
            - admin
            - expert


    Post:
      type: object
      required:
        - tags
        - title
        - body
        - previewAttachment
      properties:
        id:
          description: User's Id
          type: number
          format: int64
          readOnly: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdOn:
          description: Creation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
        text:
          description: ""
          type: string
        title:
          description: ""
          type: string
        previewAttachment: #to do!!!
          description: "URL"
          type: array
          items:
            type: string
        updatedOn:
          description: Updation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true



    Comment:
      required:
        - body
        - user
        - postId
        - text
      properties:
        id:
          description: Comment's Id
          type: number
          format: int64
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
        text:
          description: Comment's text
          type: string
        createdOn:
          description: Creation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true
        postId:
          description: ""
          type: number
          format: int64
        updatedOn:
          description: Date of update
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true

    Tag:
      required:
        - name
      type: object
      properties:
        id:
          type: number
          format: int64
          readOnly: true
        name:
          description: "Tag"
          type: string

responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  
security:
  - basicAuth: [] 

